CREATE DATABASE PLAYERS;

CREATE TABLE PLAYERS(
    ID_player NUMBER(10, 0) NOT NULL,
    name      VARCHAR2(100) NOT NULL,
    position  NUMBER(10, 0),
    nickname  VARCHAR2(100),

    Constraint PK_player Primary Key (ID_player)
);

CREATE TABLE HIRED(
    ID_player    NUMBER(10, 0) NOT NULL,
    Initial_date DATE          NOT NULL,
    final_date   DATE          NOT NULL,

    Constraint PK_Hired Primary key (ID_player, Initial_date),
    Constraint FK_Hired_Ref_Player Foreign key (ID_player)
        references PLAYERS (ID_player),
    Constraint CK_Hired CHECK (final_date > Initial_date)
);

-- EMPLOYEES
CREATE DATABASE HR;

CREATE TABLE JOBS
(
    JOB_ID   NUMBER(10, 0) NOT NULL,
    JOB_NAME VARCHAR2(100),

    CONSTRAINT PK_JOB PRIMARY KEY (JOB_ID)
);


CREATE TABLE LOCATIONS
(
    LOCATION_ID   NUMBER(10, 0) NOT NULL,
    LOCATION_NAME VARCHAR2(100) NOT NULL,

    CONSTRAINT PK_LOCATION PRIMARY KEY (LOCATION_ID)
);

CREATE TABLE DEPARTMENTS
(
    DEPARTMENT_ID   NUMBER(10, 0) NOT NULL,
    DEPARTMENT_NAME VARCHAR2(100),
    MANAGER_ID      NUMBER(10, 0),
    LOCATION_ID     NUMBER(10, 0) NOT NULL,

    CONSTRAINT PK_DEPARTMENTS PRIMARY KEY (DEPARTMENT_ID),
    CONSTRAINT FK_MANAGER_REF_MANAGERS FOREIGN KEY (MANAGER_ID)
        REFERENCES MANAGERS (MANAGER_ID),
    CONSTRAINT FK_LOCATION_REF_LOCATION FOREIGN KEY (LOCATION_ID)
        REFERENCES LOCATIONS (LOCATION_ID)
);

CREATE TABLE MANAGERS
(
    MANAGER_ID    NUMBER(10, 0) NOT NULL,
    DEPARTMENT_ID NUMBER(10, 0) NOT NULL,
    MANAGER_NAME  VARCHAR2(100),


    CONSTRAINT PK_MANAGER PRIMARY KEY (MANAGER_ID),
    CONSTRAINT FK_DEPARTMENT_REF_DEPARTMENTS FOREIGN KEY (DEPARTMENT_ID)
        REFERENCES DEPARTMENTS (DEPARTMENT_ID)

);

CREATE TABLE EMPLOYEES
(
    EMPLOYEE_ID    NUMBER(10, 0) NOT NULL,
    FIRST_NAME     VARCHAR2(100) NOT NULL,
    LAST_NAME      VARCHAR2(100),
    EMAIL          VARCHAR2(100) NOT NULL,
    PHONE_NUMBER   NUMBER(10, 0),
    HIRED_DATE     DATE,
    JOB_ID         NUMBER(10, 0) NOT NULL,
    SALARY         NUMBER(10, 0),
    COMMISSION_PCT NUMBER(10, 0),
    MANAGER_ID     NUMBER(10, 0) NOT NULL,
    DEPARTMENT_ID  NUMBER(10, 0) NOT NULL,


    CONSTRAINT PK_EMPLOYEE PRIMARY KEY (EMPLOYEE_ID),
    CONSTRAINT FK_JOB_REF_JOBS FOREIGN KEY (JOB_ID) REFERENCES JOBS (JOB_ID),
    CONSTRAINT FK_MANAGER_REF_MANAGERS FOREIGN KEY (MANAGER_ID)
        REFERENCES MANAGERS (MANAGER_ID),
    CONSTRAINT FK_DEPARTMENT_REF_DEPARTMENTS FOREIGN KEY (DEPARTMENT_ID)
        REFERENCES DEPARTMENTS (DEPARTMENT_ID)

);

--

CREATE OR REPLACE PROCEDURE ADD_NEW_PLAYER (
PLAYER_ID_IN IN NUMBER,
PLAYER_NAME_IN IN VARCHAR2,
PLAYER_POSITION IN NUMBER,
PLAYER_NICKNAME_IN IN VARCHAR2)
IS
BEGIN
   INSERT INTO PLAYERS (ID_player, name, position, nickname)
   VALUES (PLAYER_ID_IN, PLAYER_NAME_IN, PLAYER_POSITION, PLAYER_NICKNAME_IN);

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RAISE_APPLICATION_ERROR(-20001, 'CÃ³digo do Jogador Duplicado!');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'ALGUM ERRO ACONTECEU!');
END;

-- EXEC ADD_NEW_PLAYER(4, 'player 4', 1, 'Nick 4');

CREATE TABLE TB_LOG (
    DATE_LOG TIMESTAMP DEFAULT SYSDATE,
    USER_LOG VARCHAR2(30),
    DESC_LOG VARCHAR2(300)
);

--

CREATE OR REPLACE TRIGGER TG_PLAYER
    AFTER INSERT OR DELETE OR UPDATE
    ON PLAYERS
    FOR EACH ROW
    ENABLE

DECLARE
    V_USER VARCHAR2(30);
BEGIN
    SELECT USER INTO V_USER FROM DUAL;
    IF INSERTING THEN
        INSERT INTO TB_LOG(USER_LOG, DESC_LOG)
        VALUES (V_USER, 'REGISTRO INSERIDO');
    ELSIF DELETING THEN
        INSERT INTO TB_LOG(USER_LOG, DESC_LOG)
        VALUES (V_USER, 'REGISTRO DELETADO');
    ELSIF UPDATING THEN
        INSERT INTO TB_LOG(USER_LOG, DESC_LOG)
        VALUES (V_USER, 'REGISTRO ALTERADO');
    END IF;
END;



CREATE OR REPLACE FUNCTION FIRST_NAME_FUNC
    RETURN VARCHAR2
    IS
    V_EMP_NAME VARCHAR2(100);
BEGIN
    SELECT FIRST_NAME
    INTO V_EMP_NAME
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = 105;

    RETURN V_EMP_NAME;
END;

